{"version":3,"sources":["twitter-icon.svg","components/Quotes.js","App.js","reportWebVitals.js","index.js"],"names":["Quotes","useState","quote","setQuotes","getQuote","fetch","then","res","json","data","randomNum","Math","floor","random","length","useEffect","id","text","from","href","target","rel","className","src","twitter","alt","onClick","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0JAAe,MAA0B,yC,OC2C1BA,EAxCA,WACb,MAA2BC,mBAAS,IAApC,mBAAOC,EAAP,KAAcC,EAAd,KAEMC,EAAW,WACfC,MAAM,6FAGHC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACL,IAAIC,EAAYC,KAAKC,MAAMD,KAAKE,SAAWJ,EAAKK,QAChDX,EAAUM,EAAKC,QAQrB,OAJAK,qBAAU,WACRX,MACC,IAGD,sBAAKY,GAAG,YAAR,UACE,qBAAKA,GAAG,OAAR,SAAgBd,EAAMe,OACtB,qBAAKD,GAAG,SAAR,SAAkBd,EAAMgB,OACxB,sBAAKF,GAAG,UAAR,UACE,mBACEG,KAAI,gDAA2CjB,EAAMe,MACrDD,GAAG,cACHI,OAAO,SACPC,IAAI,sBAJN,SAKE,+BACE,qBAAKC,UAAU,OAAOC,IAAKC,EAASC,IAAI,gBAG5C,wBAAQC,QAAStB,EAAUkB,UAAU,MAAMN,GAAG,YAA9C,8BCxBOW,MARf,WACE,OACE,qBAAKL,UAAU,MAAf,SACE,cAAC,EAAD,OCMSM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBxB,MAAK,YAAkD,IAA/CyB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCFdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.b4088399.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-icon.93106276.svg\";","import { useState, useEffect } from \"react\";\r\nimport twitter from \"../twitter-icon.svg\";\r\n\r\nconst Quotes = () => {\r\n  const [quote, setQuotes] = useState(\"\");\r\n\r\n  const getQuote = () => {\r\n    fetch(\r\n      `https://raw.githubusercontent.com/vinitshahdeo/inspirational-quotes/master/data/data.json`\r\n    )\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        let randomNum = Math.floor(Math.random() * data.length);\r\n        setQuotes(data[randomNum]);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getQuote();\r\n  }, []);\r\n\r\n  return (\r\n    <div id=\"quote-box\">\r\n      <div id=\"text\">{quote.text}</div>\r\n      <div id=\"author\">{quote.from}</div>\r\n      <div id=\"buttons\">\r\n        <a\r\n          href={`https://twitter.com/intent/tweet?text=${quote.text}`}\r\n          id=\"tweet-quote\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\">\r\n          <span>\r\n            <img className=\"twit\" src={twitter} alt=\"twitter\" />\r\n          </span>\r\n        </a>\r\n        <button onClick={getQuote} className=\"btn\" id=\"new-quote\">\r\n          New Quote\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Quotes;\r\n","import \"./App.css\";\nimport Quotes from \"./components/Quotes\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Quotes />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}